{"version":3,"sources":["utils/setAuthToken.js","actions/types.js","actions/authActions.js","reducers/authReducers.js","reducers/errorReducers.js","reducers/index.js","store.js","components/layout/Navbar.js","components/layout/Landing.js","components/auth/Register.js","components/auth/Login.js","components/dashboard/privateRoute/PrivateRoute.js","components/dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["setAuthToken","token","axios","defaults","headers","common","GET_ERRORS","USER_LOADING","SET_CURRENT_USER","setCurrentUser","decoded","type","payload","logoutUser","dispatch","localStorage","removeItem","isEmpty","require","initialState","isAuthenticated","user","loading","combineReducers","auth","state","action","errors","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","Navbar","className","to","style","fontFamily","Component","Landing","height","width","borderRadius","letterSpacing","marginLeft","Register","props","onChange","e","setState","target","id","value","onSubmit","preventDefault","newUser","name","email","password","password2","registerUser","history","this","push","nextProps","paddingLeft","noValidate","error","classnames","invalid","htmlFor","marginTop","connect","userData","post","then","res","catch","err","response","data","withRouter","Login","loginUser","emailnotfound","passwordincorrect","setItem","jwt_decode","component","rest","render","Dashboard","onLogoutClick","split","onClick","jwtToken","currentTime","Date","now","exp","window","location","href","App","exact","path","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a9534f5d.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst setAuthToken = token => {\n  if (token) {\n    // Apply authorization token to every request if logged in\n    axios.defaults.headers.common[\"Authorization\"] = token;\n  } else {\n    // Delete auth header\n    delete axios.defaults.headers.common[\"Authorization\"];\n  }\n};\n\nexport default setAuthToken;","export const GET_ERRORS = \"GET_ERRORS\";\nexport const USER_LOADING = \"USER_LOADING\";\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";","import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport {\n    GET_ERRORS,\n    SET_CURRENT_USER,\n    USER_LOADING\n} from \"./types\";\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n    axios\n        .post(\"/api/users/register\", userData)\n        .then(res => history.push(\"/login\")) // re-direct to login on successful register\n        .catch(err =>\n            dispatch({\n                type: GET_ERRORS,\n                payload: err.response.data\n            })\n        );\n};\n\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n    axios\n        .post(\"/api/users/login\", userData)\n        .then(res => {\n            // Save to localStorage\n            // Set token to localStorage\n            const { token } = res.data;\n            localStorage.setItem(\"jwtToken\", token);\n            // Set token to Auth header\n            setAuthToken(token);\n            // Decode token to get user data\n            const decoded = jwt_decode(token);\n            // Set current user\n            dispatch(setCurrentUser(decoded));\n        })\n        .catch(err =>\n            dispatch({\n                type: GET_ERRORS,\n                payload: err.response.data\n            })\n        );\n};\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n    return {\n        type: SET_CURRENT_USER,\n        payload: decoded\n    };\n};\n\n// User loading\nexport const setUserLoading = () => {\n    return {\n        type: USER_LOADING\n    };\n};\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n    // Remove token from local storage\n    localStorage.removeItem(\"jwtToken\");\n    // Remove auth header for future requests\n    setAuthToken(false);\n    // Set current user to empty object {} which will set isAuthenticated to false\n    dispatch(setCurrentUser({}));\n};","import {\n    SET_CURRENT_USER,\n    USER_LOADING\n} from \"../actions/types\";\n\nconst isEmpty = require(\"is-empty\");\nconst initialState = {\n    isAuthenticated: false,\n    user: {},\n    loading: false\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case SET_CURRENT_USER:\n            return {\n                ...state,\n                isAuthenticated: !isEmpty(action.payload),\n                user: action.payload\n            };\n        case USER_LOADING:\n            return {\n                ...state,\n                loading: true\n            };\n        default:\n            return state;\n    }\n}","import { GET_ERRORS } from \"../actions/types\";\n\nconst initialState = {};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case GET_ERRORS:\n      return action.payload;\n    default:\n      return state;\n  }\n}","import { combineReducers } from \"redux\";\nimport authReducers from \"./authReducers\";\nimport errorReducers from \"./errorReducers\";\n\nexport default combineReducers({\n  auth: authReducers,\n  errors: errorReducers\n});","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst initialState = {};\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  compose(applyMiddleware(...middleware))\n);\n\nexport default store;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass Navbar extends Component {\n  render() {\n    return (\n      <div className=\"navbar-fixed\">\n        <nav className=\"z-depth-0\">\n          <div className=\"nav-wrapper white\">\n            <Link\n              to=\"/\"\n              style={{\n                fontFamily: \"monospace\"\n              }}\n              className=\"col s5 brand-logo center black-text\"\n            >\n              <i className=\"material-icons\">code</i>\n              MERN\n            </Link>\n          </div>\n        </nav>\n      </div>\n    );\n  }\n}\n\nexport default Navbar;","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass Landing extends Component {\n    render() {\n        return (\n            <div style={{ height: \"75vh\" }} className=\"container valign-wrapper\">\n                <div className=\"row\">\n                    <div className=\"col s12 center-align\">\n                        <Link\n                            to=\"/register\"\n                            style={{\n                                width: \"150px\",\n                                borderRadius: \"3px\",\n                                letterSpacing: \"1.5px\"\n                            }}\n                            className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\n                        >\n                            Register\n                        </Link>\n                        <Link\n                            to=\"/login\"\n                            style={{\n                                marginLeft: \"2rem\",\n                                width: \"150px\",\n                                borderRadius: \"3px\",\n                                letterSpacing: \"1.5px\"\n                            }}\n                            className=\"btn btn-large waves-effect white hoverable black-text\"\n                        >\n                            Log In\n                        </Link>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nexport default Landing;","import React, { Component } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { registerUser } from \"../../actions/authActions\";\nimport classnames from \"classnames\";\n\nclass Register extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"\",\n            email: \"\",\n            password: \"\",\n            password2: \"\",\n            errors: {}\n        };\n    }\n    componentDidMount() {\n        // If logged in and user navigates to Register page, should redirect them to dashboard\n        if (this.props.auth.isAuthenticated) {\n            this.props.history.push(\"/dashboard\");\n        }\n    }\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.errors) {\n            this.setState({\n                errors: nextProps.errors\n            });\n        }\n    }\n    onChange = e => {\n        this.setState({ [e.target.id]: e.target.value });\n    };\n    onSubmit = e => {\n        e.preventDefault();\n        const newUser = {\n            name: this.state.name,\n            email: this.state.email,\n            password: this.state.password,\n            password2: this.state.password2\n        };\n        // console.log(newUser);\n        this.props.registerUser(newUser, this.props.history);\n    };\n    render() {\n        const { errors } = this.state;\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col s8 offset-s2\">\n                        <Link to=\"/\" className=\"btn-flat waves-effect\">\n                            <i className=\"material-icons left\">keyboard_backspace</i> Back to\n                            home\n                        </Link>\n                        <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\n                            <h4>\n                                <b>Register</b> below\n                            </h4>\n                            <p className=\"grey-text text-darken-1\">\n                                Already have an account? <Link to=\"/login\">Log in</Link>\n                            </p>\n                        </div>\n                        <form noValidate onSubmit={this.onSubmit}>\n                            <div className=\"input-field col s12\">\n                                <input\n                                    onChange={this.onChange}\n                                    value={this.state.name}\n                                    error={errors.name}\n                                    id=\"name\"\n                                    type=\"text\"\n                                    className={classnames(\"\", {\n                                        invalid: errors.name\n                                    })}\n                                />\n                                <label htmlFor=\"name\">Name</label>\n                                <span className=\"red-text\">{errors.name}</span>\n                            </div>\n                            <div className=\"input-field col s12\">\n                                <input\n                                    onChange={this.onChange}\n                                    value={this.state.email}\n                                    error={errors.email}\n                                    id=\"email\"\n                                    type=\"email\"\n                                    className={classnames(\"\", {\n                                        invalid: errors.email\n                                    })}\n                                />\n                                <label htmlFor=\"email\">Email</label>\n                                <span className=\"red-text\">{errors.email}</span>\n                            </div>\n                            <div className=\"input-field col s12\">\n                                <input\n                                    onChange={this.onChange}\n                                    value={this.state.password}\n                                    error={errors.password}\n                                    id=\"password\"\n                                    type=\"password\"\n                                    className={classnames(\"\", {\n                                        invalid: errors.password\n                                    })}\n                                />\n                                <label htmlFor=\"password\">Password</label>\n                                <span className=\"red-text\">{errors.password}</span>\n                            </div>\n                            <div className=\"input-field col s12\">\n                                <input\n                                    onChange={this.onChange}\n                                    value={this.state.password2}\n                                    error={errors.password2}\n                                    id=\"password2\"\n                                    type=\"password\"\n                                    className={classnames(\"\", {\n                                        invalid: errors.password2\n                                    })}\n                                />\n                                <label htmlFor=\"password2\">Confirm Password</label>\n                                <span className=\"red-text\">{errors.password2}</span>\n                            </div>\n                            <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\n                                <button\n                                    style={{\n                                        width: \"150px\",\n                                        borderRadius: \"3px\",\n                                        letterSpacing: \"1.5px\",\n                                        marginTop: \"1rem\"\n                                    }}\n                                    type=\"submit\"\n                                    className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\n                                >\n                                    Sign up\n                                </button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nRegister.propTypes = {\n    registerUser: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired,\n    errors: PropTypes.object.isRequired\n};\nconst mapStateToProps = state => ({\n    auth: state.auth,\n    errors: state.errors\n});\nexport default connect(\n    mapStateToProps,\n    { registerUser }\n)(withRouter(Register));","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { loginUser } from \"../../actions/authActions\";\nimport classnames from \"classnames\";\n\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            email: \"\",\n            password: \"\",\n            errors: {}\n        };\n    }\n    componentDidMount() {\n        // If logged in and user navigates to Login page, should redirect them to dashboard\n        if (this.props.auth.isAuthenticated) {\n            this.props.history.push(\"/dashboard\");\n        }\n    }\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.auth.isAuthenticated) {\n            this.props.history.push(\"/dashboard\"); // push user to dashboard when they login\n        }\n        if (nextProps.errors) {\n            this.setState({\n                errors: nextProps.errors\n            });\n        }\n    }\n    onChange = e => {\n        this.setState({ [e.target.id]: e.target.value });\n    };\n    onSubmit = e => {\n        e.preventDefault();\n        const userData = {\n            email: this.state.email,\n            password: this.state.password\n        };\n        // console.log(userData);\n        this.props.loginUser(userData); // since we handle the redirect within our component, we don't need to pass in this.props.history as a parameter\n    };\n    render() {\n        const { errors } = this.state;\n        return (\n            <div className=\"container\">\n                <div style={{ marginTop: \"4rem\" }} className=\"row\">\n                    <div className=\"col s8 offset-s2\">\n                        <Link to=\"/\" className=\"btn-flat waves-effect\">\n                            <i className=\"material-icons left\">keyboard_backspace</i> Back to\n                            home\n                        </Link>\n                        <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\n                            <h4>\n                                <b>Login</b> below\n                            </h4>\n                            <p className=\"grey-text text-darken-1\">\n                                Don't have an account? <Link to=\"/register\">Register</Link>\n                            </p>\n                        </div>\n                        <form noValidate onSubmit={this.onSubmit}>\n                            <div className=\"input-field col s12\">\n                                <input\n                                    onChange={this.onChange}\n                                    value={this.state.email}\n                                    error={errors.email}\n                                    id=\"email\"\n                                    type=\"email\"\n                                    className={classnames(\"\", {\n                                        invalid: errors.email || errors.emailnotfound\n                                    })}\n                                />\n                                <label htmlFor=\"email\">Email</label>\n                                <span className=\"red-text\">\n                                    {errors.email}\n                                    {errors.emailnotfound}\n                                </span>\n                            </div>\n                            <div className=\"input-field col s12\">\n                                <input\n                                    onChange={this.onChange}\n                                    value={this.state.password}\n                                    error={errors.password}\n                                    id=\"password\"\n                                    type=\"password\"\n                                    className={classnames(\"\", {\n                                        invalid: errors.password || errors.passwordincorrect\n                                    })}\n                                />\n                                <label htmlFor=\"password\">Password</label>\n                                <span className=\"red-text\">\n                                    {errors.password}\n                                    {errors.passwordincorrect}\n                                </span>\n                            </div>\n                            <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\n                                <button\n                                    style={{\n                                        width: \"150px\",\n                                        borderRadius: \"3px\",\n                                        letterSpacing: \"1.5px\",\n                                        marginTop: \"1rem\"\n                                    }}\n                                    type=\"submit\"\n                                    className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\n                                >\n                                    Login\n                                </button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nLogin.propTypes = {\n    loginUser: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired,\n    errors: PropTypes.object.isRequired\n};\nconst mapStateToProps = state => ({\n    auth: state.auth,\n    errors: state.errors\n});\nexport default connect(\n    mapStateToProps,\n    { loginUser }\n)(Login);","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\n    <Route\n        {...rest}\n        render={props =>\n            auth.isAuthenticated === true ? (\n                <Component {...props} />\n            ) : (\n                    <Redirect to=\"/login\" />\n                )\n        }\n    />\n);\n\nPrivateRoute.propTypes = {\n    auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    auth: state.auth\n});\n\nexport default connect(mapStateToProps)(PrivateRoute);","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { logoutUser } from \"../../actions/authActions\";\n\nclass Dashboard extends Component {\n    onLogoutClick = e => {\n        e.preventDefault();\n        this.props.logoutUser();\n    };\n    render() {\n        const { user } = this.props.auth;\n        return (\n            <div style={{ height: \"75vh\" }} className=\"container valign-wrapper\">\n                <div className=\"row\">\n                    <div className=\"col s12 center-align\">\n                        <h4>\n                            Good to see you, <b>{user.name.split(\" \")[0]}</b>\n                        </h4>\n                        <button\n                            style={{\n                                width: \"150px\",\n                                borderRadius: \"3px\",\n                                letterSpacing: \"1.5px\",\n                                marginTop: \"1rem\"\n                            }}\n                            onClick={this.onLogoutClick}\n                            className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\n                        >\n                            Logout\n                        </button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nDashboard.propTypes = {\n    logoutUser: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    auth: state.auth\n});\n\nexport default connect(\n    mapStateToProps,\n    { logoutUser }\n)(Dashboard);\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport jwt_decode from \"jwt-decode\";\nimport setAuthToken from \"./utils/setAuthToken\";\nimport { setCurrentUser, logoutUser } from \"./actions/authActions\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport Navbar from \"./components/layout/Navbar\";\nimport Landing from \"./components/layout/Landing\";\nimport Register from \"./components/auth/Register\";\nimport Login from \"./components/auth/Login\";\nimport PrivateRoute from \"./components/dashboard/privateRoute/PrivateRoute\";\nimport Dashboard from \"./components/dashboard/Dashboard\";\n\n// Check for token to keep user logged in\nif (localStorage.jwtToken) {\n  // Set auth token header auth\n  const token = localStorage.jwtToken;\n  setAuthToken(token);\n  // Decode token and get user info and exp\n  const decoded = jwt_decode(token);\n  // Set user and isAuthenticated\n  store.dispatch(setCurrentUser(decoded));\n  // Check for expired token\n  const currentTime = Date.now() / 1000; // to get in milliseconds\n  if (decoded.exp < currentTime) {\n    // Logout user\n    store.dispatch(logoutUser());\n    // Redirect to login\n    window.location.href = \"./login\";\n  }\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Router>\n          <div className=\"App\">\n            <Navbar />\n            <Route exact path=\"/\" component={Landing} />\n            <Route exact path=\"/register\" component={Register} />\n            <Route exact path=\"/login\" component={Login} />\n            <Switch>\n              <PrivateRoute exact path=\"/dashboard\" component={Dashboard} />\n            </Switch>\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}